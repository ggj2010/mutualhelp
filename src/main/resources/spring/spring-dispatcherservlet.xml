<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!--不加扫描会导致后面注解提示类型错误，但是单元测试不加这个扫描可以 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:properties/*.properties" />
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.ggj.mutualhelp"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<!-- 控制器增强 类似于extends baseController -->
		 <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>  
	 	<!-- 解决事务失效问题 -->
	 	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/static/**" location="/static/" cache-period="31536000" />

	<mvc:resources location="/" mapping="/**/*.html"/>

	<!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行-->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="${adminPath}/**" />
			<bean class="com.ggj.mutualhelp.modules.base.interceptor.LogInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 配置视图解析器，我们可以使用freemarker 也可以用jsp -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置视图层 使用jstl标签 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/"></property><!-- 前缀 -->
		<property name="suffix" value=".jsp"></property><!-- 后缀 -->
	</bean>

	<!--springMvc 上传  ,如果用原生态的request获取流-->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:defaultEncoding="utf-8">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

	<!--配置自动装配，简写形式-->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 返回的是fatjson 可以自动ajax传过去的值转换成对象，然后返回的值转换成json字符串 -->
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes" value="application/json;charset=UTF-8" />
				<!-- 解决json null问题 -->
				<property name="features">
					<array>
						<!-- 是否输出值为null的字段,默认为false ,如果不加这个某个字段为空，那么json字符串里面就不会显示这个字段，比如{"name":"restful"} value不显示出来 -->
						<value>WriteMapNullValue</value>
						<!-- 字符类型字段如果为null,输出为"",而非null 比如{"name":"restful","value":null} -->
						<value>WriteNullStringAsEmpty</value>
					</array>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>


	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin -->
	<!-- 控制器异常处理 和@ExceptionHandler 是且的关系 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!--这样controller层出现权限不够，就立即跳到异常页面 -->
				<prop key="org.apache.shiro.authz.UnauthorizedException">/error/unauthorizedExceptions</prop>
				<prop key="java.lang.Throwable">/error/500</prop>
			</props>
		</property>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 启用Shiro注解（例如，@RequiresRoles，@RequiresPermissions 必须要写到这里，不然注解没作用 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->
	
</beans>