<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

	<!-- 加载配置属性文件-->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:properties/*.properties" /> 
	
	<!-- 加载应用属性实例，可通过 @Value() 掉用 标签只能加载一个文件，但是默认是string类型 
	<util:properties id="redisconfig" location="classpath:redis-config.properties" local-override="true" />
	<util:properties id="rediskey" location="classpath:redis-key.properties" local-override="true" />
	-->
	
	<!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="com.ggj.mutualhelp">
		<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在spring-dispatcherservlet.xml中只扫描@Controller注解。 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 映射实体类 -->
		<property name="typeAliasesPackage" value="com.ggj.mutualhelp" />
		<!-- mapper文件 -->
		<property name="mapperLocations" value="classpath:mappings/**/*.xml" />
		<!-- resultType/parameterType 映射到的类型
		<property name="typeAliasesSuperType" value="com.ggj.mutualhelp.common.persistence.BaseEntity"/>
		 -->
	</bean>


	<!-- 获取mybatis的映射类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ggj.mutualhelp" />
		<!--mybatis-spring1.2.2用这个配置 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--mybatis-spring1.0.1用这个配置 <property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
	</bean>
	
	  <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<!-- MyBatis end -->

	<!-- 配置数据源 destroy-method="close" 当数据库连接不使用的时候,就把该连接重新放到数据池中 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${usernames}" />
		<property name="password" value="${password}" />
		<!-- 配置密码加密和统计相关参数，统计慢sql的单位为毫秒，此处配置为300秒钟，超过300秒钟的sql为慢sql -->
		<property name="filters" value="${filters}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，相当于C3P0的idleConnectionTestPeriod 参数，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 测试连接，单位为毫秒 -->
		<property name="validationQueryTimeout" value="${validationQueryTimeout}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
	 -->
	</bean>
	

	<!-- 缓存配置 -->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:cache/ehcache-local.xml" />
		<property name="shared" value="true"/>
	</bean>

</beans>